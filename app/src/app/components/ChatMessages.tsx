import React from "react";
import ReactMarkdown from "react-markdown";

// TypeScript interfaces
interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  imageUrl?: string; // Added for image messages
  isStreaming?: boolean; // Flag to indicate a message is currently streaming
}

interface ChatMessagesProps {
  messages: Message[];
  isLoading: boolean;
}

export default function ChatMessages({ messages, isLoading }: ChatMessagesProps) {
  return (
    <>
      {messages.map((message) => (
        <div
          key={message.id}
          className={`flex items-start ${
            message.role === "user" ? "justify-end" : "justify-start"
          } mb-4`}
        >
          {/* Show avatar for assistant messages */}
          {message.role === "assistant" && (
            <div className="w-10 h-10 rounded-full bg-green-200 mr-3 flex items-center justify-center overflow-hidden border-2 border-white shadow">
              <span className="text-sm font-medium text-green-800">M</span>
            </div>
          )}

          <div
            className={`rounded-3xl p-4 max-w-[80%] shadow-sm ${
              message.role === "user"
                ? "bg-blue-100 text-blue-900"
                : "bg-white border border-gray-200 text-gray-800"
            }`}
          >
            {message.role === "user" ? (
              // Render user messages as plain text
              <p className="text-sm">{message.content}</p>
            ) : (
              // Render assistant messages with markdown
              <div className="text-sm markdown-content">
                <ReactMarkdown>{message.content}</ReactMarkdown>
                {/* Show blinking cursor for streaming messages */}
                {message.isStreaming && (
                  <span className="inline-block w-2 h-4 bg-gray-600 ml-0.5 animate-pulse"></span>
                )}
              </div>
            )}

            {/* Display image if present */}
            {message.imageUrl && (
              <div className="mt-2">
                <img
                  src={message.imageUrl}
                  alt="Generated image"
                  className="rounded-2xl max-w-full max-h-[300px] object-contain border border-gray-200 bg-white"
                  onError={(e) => {
                    // Fallback for failed image loads
                    const target = e.target as HTMLImageElement;
                    target.src = "https://via.placeholder.com/400x400?text=Image+Generation+Failed";
                    target.alt = "Image generation failed";
                  }}
                />
                <p className="text-xs text-gray-500 mt-1">Image generated by GPT-Image-1</p>
              </div>
            )}
          </div>
        </div>
      ))}

      {/* Typing indicator - only show when loading and no streaming message is present */}
      {isLoading && !messages.some((m) => m.isStreaming) && (
        <div className="flex items-start">
          <div className="w-10 h-10 rounded-full bg-green-200 mr-3 flex items-center justify-center overflow-hidden border-2 border-white shadow">
            <span className="text-sm font-medium text-green-800">M</span>
          </div>
          <div className="bg-white rounded-3xl p-4 shadow-sm border border-gray-200">
            <div className="flex space-x-1">
              <div
                className="w-2 h-2 bg-gray-300 rounded-full animate-bounce"
                style={{ animationDelay: "0s" }}
              ></div>
              <div
                className="w-2 h-2 bg-gray-300 rounded-full animate-bounce"
                style={{ animationDelay: "0.2s" }}
              ></div>
              <div
                className="w-2 h-2 bg-gray-300 rounded-full animate-bounce"
                style={{ animationDelay: "0.4s" }}
              ></div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

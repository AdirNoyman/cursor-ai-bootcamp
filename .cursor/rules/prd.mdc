---
description: 
globs: 
alwaysApply: false
---
# Objective
Generate a comprehensive PRD for my project. Ask me clarification questions to help narrow the PRD appropriately. List any assumptions clearly.

<context>
# Overview  
[Provide a high-level overview of your product here. Explain what problem it solves, who it's for, and why it's valuable.]

# Core Features  
[List and describe the main features of your product. For each feature, include:
- What it does
- Why it's important
- How it works at a high level]

# User Experience  
[Describe the user journey and experience. Include:
- User personas
- Key user flows
- UI/UX considerations]
</context>
<PRD>
# Technical Architecture  
[Outline the technical implementation details:
- System components
- Data models
- APIs and integrations
- Infrastructure requirements]

# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]

# Logical Dependency Chain
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]
</PRD>


# User Notes

####  What is the main purpose of your project?
The purpose is to create a GPT-powered chatbot. It will also use the OpenAI API to create images when the feature is toggled.

#### Who are the intended users?
Anyone who wants to chat with LLMs or generate images.

#### What are the core features or functionalities you want?
1. Chat - can display messages.
2. Stream text respones from OpenAI
3. Toggle image mode
4. User can start a new chat by clicking "New Chat"

#### Are there any specific technologies, frameworks, or platforms you want to use?
- NextJS App Directory [NextJS_AppDirectory.md](mdc:docs/tech/NextJS_AppDirectory.md) 
- React/TypeScript - use React official docs.
- TailwindCSS (general styling) â€“ use Tailwind official docs
- ShadUI (for re-usable common components)  - use ShadUI official docs
- OpenAI SDK: [OpenAI_StreamText.md](mdc:docs/tech/OpenAI_StreamText.md) with `gpt-4.1-nano-2025-04-14`
- OpenAI SDK: [OpenAI_ImageGeneration.md](mdc:docs/tech/OpenAI_ImageGeneration.md) with `gpt-image-1`. Do NOT use Dall-E.
- Supabase Edge functions (Chat functionality)  [Supabase_EdgeFunctions.md](mdc:docs/tech/Supabase_EdgeFunctions.md)
- Supabase Database (store chat messages) [Supabase_Migrations_Local.md](mdc:docs/tech/Supabase_Migrations_Local.md)  [SUPABASE_COMMANDS.md](mdc:docs/tech/SUPABASE_COMMANDS.md)

I want to use Supabase locally with the CLI. The project structure should be follow a logical, maintainable structure that follows best practices.
- app (nextJS app directory)
--src
---app
----components
----types
- supabase (backend)
--functions
--migrations

#### Any must-have requirements or constraints (e.g., security, performance, integrations)?

Security is important, but let's work on it at the end, as we just need a simplistic, baseline functionality for now to speed up development. We'll focus on securing API keys later.

Focus on simplistic design for now, just for development and basic styling. We'll focus on it at the end.

#### MVP Simplifications
Focus on MVP only. You can mention future improvements as a section but do not add it to the planning stage. 
- No user auth
- No deployment, CI/CD setup needed.
- No testing required yet.- No dark mode/light mode.
- No animations
- No keyboard shortcuts
- Do not optimize API calls/performance.
- Do not need to show past chats

#### Documentation
Reference documentation at key steps to follow exact syntax requirements
